const { Order, Post } = require('../models')
const TelegramBot = require('node-telegram-bot-api')
const OrderStatus = require('../models/orderStatus')
const { Sequelize, Op } = require('sequelize')
require('dotenv').config()

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const CHAT_ID = process.env.CHAT_ID
const WORKOUT_USER_ID = process.env.WORKOUT_USER_ID
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true })

const colorOptions = {
	'#FF0000': { title: '–ß–µ—Ä–≤–æ–Ω–∏–π' }, // Red
	'#008000': { title: '–ó–µ–ª–µ–Ω–∏–π' }, // Green
	'#0000FF': { title: '–°–∏–Ω—ñ–π' }, // Blue
	'#FFFF00': { title: '–ñ–æ–≤—Ç–∏–π' }, // Yellow
	'#000000': { title: '–ß–æ—Ä–Ω–∏–π' }, // Black
	'#FFFFFF': { title: '–ë—ñ–ª–∏–π' }, // White
	'#808080': { title: '–°—ñ—Ä–∏–π' }, // Gray
	'#808000': { title: '–û–ª–∏–≤–∫–æ–≤–∏–π' }, // Olive
	'#FFA500': { title: '–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π' }, // Orange
	'#00BFFF': { title: '–ë–ª–∞–∫–∏—Ç–Ω–∏–π' }, // Light Blue
	'#800080': { title: '–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π' }, // Purple
	'#00008B': { title: '–¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π' }, // Dark Blue
	'#800000': { title: '–ë–æ—Ä–¥–æ–≤–∏–π' }, // Maroon
	'#006400': { title: '–¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π' }, // Dark Green
	'#39FF14': { title: '–ù–µ–æ–Ω–æ–≤–∏–π –∑–µ–ª–µ–Ω–∏–π' }, // Neon Green
}

const paidStatus = {
	UNPAID: { status: '–ù–µ c–ø–ª–∞—á–µ–Ω–∏–π' },
	PAID: { status: '–°–ø–ª–∞—á–µ–Ω–∏–π' },
	IN_TRANSIT: { status: '–í –¥–æ—Ä–æ–∑—ñ' },
	DELIVERED: { status: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π' },
}

bot.onText(/\/start/, msg => {
	const chatId = msg.chat.id

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
	bot.sendMessage(chatId, 'üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:', {
		reply_markup: {
			keyboard: [
				[
					{ text: 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (/list_orders)' },
					{ text: 'üîç –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (/filter_orders)' },
				],
			],
			resize_keyboard: true,
			one_time_keyboard: false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ false, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ –∏—Å—á–µ–∑–∞–ª–∏
		},
	})
})

bot.onText(/\/filter_orders/, async msg => {
	const chatId = msg.chat.id

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	const filterButtons = [
		[
			{ text: '–ù–µ —Å–ø–ª–∞—á–µ–Ω–∏–π', callback_data: 'filter-UNPAID' },
			{ text: '–°–ø–ª–∞—á–µ–Ω–∏–π', callback_data: 'filter-PAID' },
		],
		[
			{ text: '–í –¥–æ—Ä–æ–∑—ñ', callback_data: 'filter-IN_TRANSIT' },
			{ text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π', callback_data: 'filter-DELIVERED' },
		],
		[{ text: '–ó–∞ –ø–æ–∫—É–ø—Ü–µ–º', callback_data: 'BY_BUYER' }],
	]

	bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:', {
		reply_markup: {
			inline_keyboard: filterButtons,
		},
	})
})

bot.on('callback_query', async query => {
	const chatId = query.message.chat.id
	const [action, _status] = query.data.split('-')
	if (query.data === 'BY_BUYER') {
		bot.sendMessage(
			chatId,
			'–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É Telegram –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–∫—É–ø—Ü—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:'
		)
		bot.on('message', async msg => {
			const buyerInput = msg.text
			// –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			try {
				const orders = await Order.findAll({
					where: {
						data: {
							// –ò—Å–ø–æ–ª—å–∑—É–µ–º Op.contains –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
							[Op.contains]: {
								orderData: {
									telegramAddress: buyerInput,
								},
							},
						},
					},
				})

				if (orders.length === 0) {
					bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–∫—É–ø—Ü—è.')
					return
				}

				const orderButtons = orders.map(order => {
					return [
						{
							text: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID ${order.id}`,
							callback_data: `select_order-${order.id}`,
						},
					]
				})

				bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', {
					reply_markup: {
						inline_keyboard: orderButtons,
					},
				})
			} catch (error) {
				console.error('Error fetching orders by buyer:', error)
				bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.')
			}
		})
	}

	if (action === 'filter') {
		try {
			const orders = await Order.findAll({
				where: { status: _status },
			})

			if (orders.length === 0) {
				bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑ —Ü–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.')
				return
			}

			const orderButtons = orders.map(order => {
				return [
					{
						text: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID ${order.id}`,
						callback_data: `select_order-${order.id}`,
					},
				]
			})

			bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', {
				reply_markup: {
					inline_keyboard: orderButtons,
				},
			})
		} catch (error) {
			console.error('Error fetching filtered orders:', error)
			bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.')
		}
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	if (action === 'back_to_main') {
		bot.sendMessage(
			chatId,
			'üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:',
			{
				reply_markup: {
					keyboard: [
						[
							{ text: 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (/list_orders)' },
							{ text: 'üîç –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (/filter_orders)' },
						],
					],
					resize_keyboard: true,
				},
			}
		)
	}
})

bot.on('message', msg => {
	const chatId = msg.chat.id

	if (msg.text === 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (/list_orders)') {
		bot.sendMessage(chatId, '/list_orders')
	} else if (msg.text === 'üîç –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (/filter_orders)') {
		bot.sendMessage(chatId, '/filter_orders')
	}
})

bot.onText(/\/list_orders/, async msg => {
	const chatId = msg.chat.id

	try {
		const orders = await Order.findAll() // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
		if (orders.length === 0) {
			bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.')
			return
		}

		const orderButtons = orders.map(order => {
			return [
				{
					text: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID ${order.id}`,
					callback_data: `select_order-${order.id}`,
				},
			]
		})

		bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', {
			reply_markup: {
				inline_keyboard: orderButtons,
			},
		})
	} catch (error) {
		console.error('Error fetching orders:', error)
		bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.')
	}
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
bot.on('callback_query', async query => {
	const chatId = query.message.chat.id
	const [action, orderId, newStatus] = query.data.split('-')
	console.log('action :>> ', action)
	try {
		if (action === 'select_order') {
			const order = await Order.findByPk(orderId)
			if (!order) {
				bot.sendMessage(chatId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`)
				return
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
			const orderItems = order.data.orderData.order
				.map(item => {
					return (
						`*–ù–∞–∑–≤–∞:* ${item.name}\n` +
						`*–†–æ–∑–º—ñ—Ä:* ${item.size}\n` +
						`*–ö–æ–ª—ñ—Ä:* ${
							colorOptions[item.color]?.title || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–ª—ñ—Ä'
						}\n` +
						`*–ö—ñ–ª—å–∫—ñ—Å—Ç—å:* ${item.count}\n` +
						`*–¶—ñ–Ω–∞:* ${item.price} –≥—Ä–Ω\n` +
						`*–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è:* ${item.image}\n` // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
					)
				})
				.join('\n')

			const statusButtons = Object.keys(paidStatus).map(statusKey => {
				return [
					{
						text: paidStatus[statusKey].status,
						callback_data: `change_status-${orderId}-${statusKey}`,
					},
				]
			})

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
			bot.sendMessage(
				chatId,
				`*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID ${orderId}*\n` +
					`*–°—Ç–∞—Ç—É—Å:* ${paidStatus[order.status].status}\n` +
					`*–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:* ${order.createdAt.toLocaleDateString()} ${order.createdAt.toLocaleTimeString()}\n` +
					`*–¢–µ–ª–µ–≥—Ä–∞–º –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* ${order.data.orderData.telegramAddress}\n` +
					`*–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* ${calculateTotalPrice(
						order.data.orderData.order
					)} –≥—Ä–Ω\n` +
					`*–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n` +
					`${orderItems}`,
				{
					reply_markup: {
						inline_keyboard: statusButtons,
					},
					parse_mode: 'Markdown',
				}
			)
		} else if (action === 'change_status') {
			// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
			const updatedOrder = await Order.update(
				{ status: newStatus },
				{ where: { id: orderId } }
			)

			if (updatedOrder[0] === 0) {
				bot.sendMessage(chatId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`)
				return
			}

			// Fetch the updated order details
			const updatedOrderDetails = await Order.findByPk(orderId)
			if (!updatedOrderDetails) {
				bot.sendMessage(chatId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`)
				return
			}

			// Get the order items for the updated order
			const orderItems = updatedOrderDetails.data.orderData.order
				.map(item => {
					return (
						`*–ù–∞–∑–≤–∞:* ${item.name}\n` +
						`*–†–æ–∑–º—ñ—Ä:* ${item.size}\n` +
						`*–ö–æ–ª—ñ—Ä:* ${
							colorOptions[item.color]?.title || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–ª—ñ—Ä'
						}\n` +
						`*–ö—ñ–ª—å–∫—ñ—Å—Ç—å:* ${item.count}\n` +
						`*–¶—ñ–Ω–∞:* ${item.price} –≥—Ä–Ω\n` +
						`*–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è:* ${item.image}\n` // –≠—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
					)
				})
				.join('\n')

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
			bot.sendMessage(
				chatId,
				`–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "*${paidStatus[newStatus].status}*".\n\n` +
					`*–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:* ${paidStatus[newStatus].status}\n` +
					`*–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n` +
					`*–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:* ${updatedOrderDetails.createdAt.toLocaleDateString()} ${updatedOrderDetails.createdAt.toLocaleTimeString()}\n` +
					`*–¢–µ–ª–µ–≥—Ä–∞–º –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* ${updatedOrderDetails.data.orderData.telegramAddress}\n` +
					`*–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* ${calculateTotalPrice(
						updatedOrderDetails.data.orderData.order
					)} –≥—Ä–Ω\n` +
					`*–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n` +
					`${orderItems}`, // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
				{
					parse_mode: 'Markdown',
				}
			)
		}
	} catch (error) {
		console.error('Error handling callback query:', error)
		bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.')
	}
})

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
bot.on('callback_query', async query => {
	const chatId = query.message.chat.id
	const [action, orderId, newStatus] = query.data.split('-')
	if (action === 'change_status') {
		try {
			const updatedOrder = await Order.update(
				{ status: newStatus },
				{ where: { id: orderId } }
			)
			if (updatedOrder[0] === 0) {
				bot.sendMessage(chatId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`)
			} else {
				bot.sendMessage(
					chatId,
					`–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${paidStatus[newStatus].status}.`
				)
			}
		} catch (error) {
			console.error('Error updating order status:', error)
			bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
		}
	}
})

const createOrder = async (req, res) => {
	try {
		const orderData = req.body

		if (!orderData) {
			return res.status(400).json({ message: 'Order data is required.' })
		}

		const newOrder = await Order.create({
			data: orderData,
			status: 'UNPAID',
		})

		// Format the message to be sent to Telegram
		const message = formatOrderMessage(orderData, newOrder.status)

		await bot.sendMessage(CHAT_ID, message, {
			parse_mode: 'Markdown', // Use Markdown for formatting
		})

		res.status(201).json(newOrder)
	} catch (error) {
		console.error('Error creating order:', error)
		res.status(500).json({ message: 'Error creating order', error })
	}
}

const sendFlyToTraining = async (req, res) => {
	try {
		const { name, phone } = req.body

		if (!name || !phone) {
			return res.status(400).json({ message: 'name and phone is required.' })
		}

		const message = `–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n–Ü–º'—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`

		await bot.sendMessage(CHAT_ID, message, {
			parse_mode: 'Markdown', // Use Markdown for formatting
		})

		res.status(201).json({
			message:
				'–£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.',
		})
	} catch (error) {
		console.error('Error creating order:', error)
		res.status(500).json({ message: 'Error creating order', error })
	}
}

const calculateTotalPrice = orderItems => {
	return orderItems.reduce((total, item) => total + item.price * item.count, 0)
}

const posts = []
let currentVoiceMessages = [] // –ú–∞—Å—Å–∏–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let lastTextMessage = '' // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

bot.on('message', async msg => {
	if (msg?.from?.id == WORKOUT_USER_ID) {
		console.log('msg :>> ', msg.from.id)
		if (msg.voice) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
			const voiceFileId = msg.voice.file_id // –ü–æ–ª—É—á–∞–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ getFile
			bot
				.getFile(voiceFileId)
				.then(file => {
					// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
					const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${file.file_path}`

					// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
					currentVoiceMessages.push({
						value: fileUrl,
						number: currentVoiceMessages.length + 1, // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
					})

					console.log(`Voice message from user : ${fileUrl}`)
				})
				.catch(err => {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err)
				})
		} else if (msg.text) {
			// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
			if (currentVoiceMessages.length >= 2) {
				lastTextMessage = msg.text // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã
				const containsDigits = /\d/.test(lastTextMessage)
				if (containsDigits) {
					const postTitle = new Date().toISOString() // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π

					// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
					const post = {
						title: postTitle,
						content: lastTextMessage, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
						voice_content: currentVoiceMessages, // –ú–∞—Å—Å–∏–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
						userId: 1,
					}

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –º–∞—Å—Å–∏–≤–µ
					posts.push(post)

					try {
						// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
						await Post.create(post)
						console.log('–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', post)
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error)
					}

					// –°–±—Ä–æ—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
					currentVoiceMessages = []
					lastTextMessage = ''

					console.log('–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:', post)
				} else {
					console.log('–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã, –ø–æ—Å—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.')
				}
			} else {
				console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2.')
			}
		}
	}
})

// Function to format order message
const formatOrderMessage = (orderData, status) => {
	const orderItems = orderData.orderData.order
		.map(item => {
			return (
				`*–ù–∞–∑–≤–∞:* ${item.name}\n` +
				`*–†–æ–∑–º—ñ—Ä:* ${item.size}\n` +
				`*–ö–æ–ª—ñ—Ä:* ${colorOptions[item.color]?.title}\n` +
				`*–ö—ñ–ª—å–∫—ñ—Å—Ç—å:* ${item.count}\n` +
				`*–¶—ñ–Ω–∞:* ${item.price} –≥—Ä–Ω\n` +
				`*–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è:* ${item.image}\n` // This is for displaying the link
			)
		})
		.join('\n')

	return (
		`*–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n` +
		`${orderItems}\n` + // Add a newline for better formatting
		`*–¢–µ–ª–µ–≥—Ä–∞–º –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* ${orderData.orderData.telegramAddress}\n` +
		`*–°—Ç–∞—Ç—É—Å:* ${paidStatus[status]?.status || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å'}`
	)
}

module.exports = {
	createOrder,
	sendFlyToTraining,
}
